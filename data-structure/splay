#include <bits/stdc++.h>

using namespace std;

#define LL long long
#define pii pair<int,int>

const int INF = 0x3f3f3f3f;

long long a[100010];

struct node{
	node *ch[2], *pre;
	long long lazy, sum;
	int id, s;
	node(node *p = NULL, int id = -1):pre(p), id(id){
	 	s = 1, lazy = 0, sum = a[id];
		ch[0] = ch[1] = NULL;
	}
	void pushup(){
		sum = a[id] + lazy, s = 1;
		if(ch[0] != NULL) sum += ch[0]->sum, s += ch[0]->s;
		if(ch[1] != NULL) sum += ch[1]->sum, s += ch[1]->s;
	}
	void pushdown(){
		if(lazy != 0){
			a[id] += lazy;
			if(ch[0] != NULL){
				ch[0]->sum += lazy * ch[0]->s;
				ch[0]->lazy += lazy;
			}
			if(ch[1] != NULL){
				ch[1]->sum += lazy * ch[1]->s;
				ch[1]->lazy += lazy;
			}
			lazy = 0;
		}
	}
};

struct Splay{

	node *root;

	void debug(node* x){
		if(x != NULL){
			debug(x->ch[0]);
			printf("id = %d, sz = %d, sum = %lld, lazy = %lld, a[i] = %lld\n", x->id, x->s, x->sum, x->lazy, a[x->id]);
			debug(x->ch[1]);
		}
	}

	void rotate(node* x, int c){
		node* y = x->pre;
		y->pushdown(), x->pushdown();
		y->ch[!c] = x->ch[c];
		if(x->ch[c] != NULL) x->ch[c]->pre = y;
		x->pre = y->pre;
		if(y->pre != NULL)
			if(y->pre->ch[0] == y) y->pre->ch[0] = x;
			else y->pre->ch[1] = x;
		y->pre = x; x->ch[c] = y;
		y->pushup();
		if(y == root) root = x;
	}

	void splay(node *x, node *f){
		x->pushdown();
		while(x->pre != f){
			if(x->pre->pre == f)
				if(x->pre->ch[0] == x) rotate(x, 1);
				else rotate(x, 0);
			else{
				node *y = x->pre, *z = y->pre;
				if(z->ch[0] == y)
					if(y->ch[0] == x)
						rotate(y, 1), rotate(x, 1);
					else
						rotate(x, 0), rotate(x, 1);
				else
					if(y->ch[1] == x)
						rotate(y, 0), rotate(x, 0);
					else
						rotate(x, 1), rotate(x, 0);
			}
		}
		x->pushup();
		if(f == NULL) root = x;
	//	debug(root);
	//	puts("");
	}

	void select(int k, node* x){
		node* y; int tmp;
		for(y = root; ; ){
			y->pushdown();
			if(y->ch[0] == NULL) tmp = 0;
			else tmp = y->ch[0]->s;
			if(k == tmp + 1) break;
			if(k <= tmp) y = y->ch[0];
			else k -= tmp + 1, y = y->ch[1];
		}
		splay(y, x);
	}

	void insert(node *x, node* fa, int id){
		if(x == NULL){
			x = new node(fa, id);
			splay(x, NULL);
		}
		else{
			int d = id < x->id ? 0 : 1;
			insert(x->ch[d], x, id);
			x->pushup();
		}
	}

	void update(int A, int B, int v){
		select(A, NULL);
		select(B + 2, root);
		node *x = root->ch[1]->ch[0];
		x->lazy += v;
		x->sum += (long long)(v) * (long long)(x->s);
	}

	long long query(int A, int B){
		select(A, NULL);
		select(B + 2, root);
		node *x = root->ch[1]->ch[0];
		return x->sum;
	}
}t;

int main(){
	int n, m;
	while(~scanf("%d%d", &n, &m)){
		t.root = NULL;
		t.insert(t.root, NULL, 0);
		t.insert(t.root, NULL, n + 1);
		for(int i = 1; i <= n; ++i){
			scanf("%lld", &a[i]);
			t.insert(t.root, NULL, i);
		}
		for(int i = 0; i < m; ++i){
			int a, b;
			char x[10]; scanf("%s%d%d", x, &a, &b);
			if(x[0] == 'Q') printf("%lld\n", t.query(a, b));
			else{
				int c; scanf("%d", &c);
				t.update(a, b, c);
			}
		}
	}
	return 0;
}


