#include <bits/stdc++.h>

using namespace std;

const int maxn = 132000;

struct node{
	int v, XOR;
}st[maxn<<2];

int hs[maxn];

void pushdown(int o){
	if(st[o].v != -1){
		st[o<<1|1].v = st[o<<1].v = st[o].v;
		st[o<<1].XOR = st[o<<1|1].XOR = 0;
		st[o].v = -1;
	}
	if(st[o].XOR){
		if(st[o<<1|1].v != -1) st[o<<1|1].v ^= 1;
		else st[o<<1|1].XOR ^= 1;
		if(st[o<<1].v != -1) st[o<<1].v ^= 1;
		else st[o<<1].XOR ^= 1;
		st[o].XOR = 0;
	}
}

void build(int o, int l, int r){
	st[o].v = st[o].XOR = 0;
	if(l == r) return;
	int mid = l + r >> 1;
	build(o<<1, l, mid);
	build(o<<1|1, mid+1, r);
}

void update(int o, int l, int r, int ql, int qr, int v){
	if(l == ql && r == qr){
		if(v != -1){
			st[o].v = v; st[o].XOR = 0;
		}
		else{
			if(st[o].v != -1) st[o].v ^= 1;
			else st[o].XOR ^= 1;
		}
		return;
	}
	pushdown(o);
	int mid = l + r >> 1;
	if(qr <= mid) update(o<<1, l, mid, ql, qr, v);
	else if(ql > mid) update(o<<1|1, mid+1, r, ql, qr, v);
	else{
		update(o<<1, l, mid, ql, mid, v);
		update(o<<1|1, mid+1, r, mid+1, qr, v);
	}
}

void query(int o, int l, int r){
	if(st[o].v == 1){
		for(int i = l; i <= r; ++i)
			hs[i] = 1;
		return;
	}
	else if(st[o].v == 0) return;
	if(l == r) return;
	pushdown(o);
	int mid = l + r >> 1;
	query(o<<1, l, mid);
	query(o<<1|1, mid+1, r);
}

int main(){
	memset(hs, 0, sizeof(hs));
	build(1, 1, maxn);
	char op, left, right;
	int a, b;
	while(~scanf("%c %c%d,%d%c%*c", &op, &left, &a, &b, &right)){
		++a, ++b;
		a <<= 1, b <<= 1;
		if(left == '(') ++a;
		if(right == ')') --b;
		if(a > b){
			if(op == 'I' || op == 'C')
				update(1, 1, maxn, 1, maxn, 0);
			continue;
		}
		if(op == 'U') update(1, 1, maxn, a, b, 1);
		else if(op == 'I'){
			if(a > 1) update(1, 1, maxn, 1, a - 1, 0);
			update(1, 1, maxn, b + 1, maxn, 0);
		}
		else if(op == 'D') update(1, 1, maxn, a, b, 0);
		else if(op == 'C'){
			if(a > 1) update(1, 1, maxn, 1, a - 1, 0);
			update(1, 1, maxn, b + 1, maxn, 0);
			update(1, 1, maxn, a, b, -1);
		}
		else update(1, 1, maxn, a, b, -1);
	}
	query(1, 1, maxn);
	bool fail = 1;
	for(int i = 0, j; i < maxn; ++i){
		if(hs[i]){
			for(j = i + 1; j < maxn; ++j)
				if(!hs[j]) break;
			--j;
			if(!fail) putchar(' ');
			fail = 0;
			printf("%c%d,%d%c", i&1?'(':'[', (i>>1)-1, ((j+1)>>1)-1, j&1?')':']');
			i = j + 1;
		}
	}
	if(fail) printf("empty set");
	puts("");
	return 0;
}

