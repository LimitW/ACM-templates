#include <bits/stdc++.h>

using namespace std;

#define LL long long
#define pii pair<int,int>

const int INF = 0x3f3f3f3f;

const int maxn = 1e6 + 10;

struct Monoqueue{
	int head , tail;
	pii q[maxn];
	Monoqueue(){
		head = -1; tail = -1;
	}
	void pop(){
		if(head != tail) head++;
	}
	void insert_as(pii val)
	{
		if(head == tail) { q[++tail] = val; return; }
		while(head < tail && val.first <= q[tail].first)
				tail--;
		if(head == tail || (tail >= 0 &&val.first > q[tail].first))
			q[++tail] = val;
	}
	void insert_ds(pii val){
		if(head == tail) { q[++tail] = val; return; }
		while(head < tail && val.first >= q[tail].first)
				tail--;
		if(head == tail || (tail >= 0 &&val.first < q[tail].first))
			q[++tail] = val;
	}
	int empty() { return head >= tail; }
	pii front() {
		if(!empty()) return q[head+1];
	}
	void clear() {
		memset(q,0,sizeof(q));
		head = tail = -1;
	}
};

int a[maxn];
int ma[maxn] , mi[maxn];

int main(){
	int n,k; scanf("%d%d",&n,&k);
	for(int i = 0; i < n; i++)
		scanf("%d",&a[i]);
	Monoqueue q;
	q.insert_as(make_pair(a[0],0));
	if(0 >= k -1) mi[0] = a[0];
	for(int i = 1; i < n; i++)
	{
		while(!q.empty() && i - q.front().second >= k) q.pop();
		q.insert_as(make_pair(a[i],i));
		if(i >= k-1) mi[i] = q.front().first;
	}
	q.clear();
	q.insert_ds(make_pair(a[0],0));
	if(0 >= k -1) ma[0] = a[0];
	for(int i = 1; i < n; i++)
	{
		while(!q.empty() && i - q.front().second >= k) q.pop();
		q.insert_ds(make_pair(a[i],i));
		if(i >= k-1) ma[i] = q.front().first;
	}
	for(int i = k - 1; i < n; i++)
	{
		printf("%d%c",mi[i], i == n-1 ? '\n' : ' ');
	}
	for(int i = k - 1; i < n; i++)
	{
		printf("%d%c",ma[i], i == n-1 ? '\n' : ' ');
	}
    return 0;
}
